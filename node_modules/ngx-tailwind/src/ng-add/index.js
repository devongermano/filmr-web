"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ngAdd = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const schematics_2 = require("@angular/cdk/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const dependencies_1 = require("@schematics/angular/utility/dependencies");
const config_1 = require("@schematics/angular/utility/config");
const change_1 = require("@schematics/angular/utility/change");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
const NGX_BUILD_PLUS_BUILDER_TARGET = 'ngx-build-plus:browser';
const NGX_BUILD_PLUS_DEV_BUILDER_TARGET = 'ngx-build-plus:dev-server';
const NGX_BUILD_PLUS_KARMA_BUILDER_TARGET = 'ngx-build-plus:karma';
function ngAdd(_options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const workspace = config_1.getWorkspace(host);
        const project = schematics_2.getProjectFromWorkspace(workspace, _options.project);
        const projectName = _options.project || Object.keys(workspace.projects)[0];
        if (!project) {
            throw new schematics_1.SchematicsException(`Project ${projectName} is not defined in this workspace.`);
        }
        if (project.projectType !== 'application') {
            throw new schematics_1.SchematicsException(`ngx-tailwind requires a project type of "application" but ${projectName} isn't.`);
        }
        return schematics_1.chain([
            addDependencies(_options),
            addNpmScripts(_options),
            updateStyles(_options),
            addWebpackConfig(_options),
            updateAngularJSON(_options),
            install(),
            tailwindInit(_options),
        ]);
    });
}
exports.ngAdd = ngAdd;
function addDependencies(_options) {
    return (host) => {
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'tailwindcss',
            version: _options.tailwindVersion,
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'autoprefixer',
            version: _options.autoprefixerVersion,
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'postcss',
            version: _options.postcssVersion,
        });
        if (_options.cssFormat === 'scss') {
            dependencies_1.addPackageJsonDependency(host, {
                type: dependencies_1.NodeDependencyType.Dev,
                name: 'postcss-scss',
                version: _options.postcssScssVersion,
            });
        }
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'postcss-import',
            version: _options.postcssImportVersion,
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'postcss-loader',
            version: _options.postcssLoaderVersion,
        });
        dependencies_1.addPackageJsonDependency(host, {
            type: dependencies_1.NodeDependencyType.Dev,
            name: 'ngx-build-plus',
            version: _options.ngxBuildPlusVersion,
        });
    };
}
function updateStyles(options) {
    return (tree, context) => {
        const workspace = config_1.getWorkspace(tree);
        const project = schematics_2.getProjectFromWorkspace(workspace, options.project);
        const stylePath = schematics_2.getProjectStyleFile(project, options.cssFormat);
        if (!stylePath) {
            context.logger.error(`Cannot update project styles file: Style path not found`);
            return tree;
        }
        const insertion = new change_1.InsertChange(stylePath, 0, getTailwindImports());
        const recorder = tree.beginUpdate(stylePath);
        recorder.insertLeft(0, insertion.toAdd);
        tree.commitUpdate(recorder);
        return tree;
    };
}
function getTailwindImports() {
    return `@import 'tailwindcss/base';\n
@import 'tailwindcss/components';\n
@import 'tailwindcss/utilities';\n`;
}
function tailwindInit(_options) {
    return (_tree, context) => {
        if (!_options.skipTailwindInit) {
            const packageInstall = context.addTask(new tasks_1.NodePackageInstallTask());
            context.addTask(new tasks_1.RunSchematicTask('tailwind-init', {}), [
                packageInstall,
            ]);
        }
        return _tree;
    };
}
function addWebpackConfig(options) {
    return (_host) => __awaiter(this, void 0, void 0, function* () {
        const sourceTemplates = schematics_1.url(`./templates/webpack/${options.cssFormat}`);
        const sourceParametrizedTemplates = schematics_1.apply(sourceTemplates, []);
        return schematics_1.mergeWith(sourceParametrizedTemplates);
    });
}
function updateAngularJSON(options) {
    return (tree, context) => {
        const workspace = config_1.getWorkspace(tree);
        const project = schematics_2.getProjectFromWorkspace(workspace, options.project);
        const browserTargets = schematics_2.getTargetsByBuilderName(project, workspace_models_1.Builders.Browser);
        const devServerTargets = schematics_2.getTargetsByBuilderName(project, workspace_models_1.Builders.DevServer);
        const karmaServerTargets = schematics_2.getTargetsByBuilderName(project, workspace_models_1.Builders.Karma);
        browserTargets.forEach((browserTarget) => {
            browserTarget.builder = NGX_BUILD_PLUS_BUILDER_TARGET;
            browserTarget.options = Object.assign({ extraWebpackConfig: 'webpack.config.js' }, browserTarget.options);
        });
        devServerTargets.forEach((browserTarget) => {
            browserTarget.builder = NGX_BUILD_PLUS_DEV_BUILDER_TARGET;
            browserTarget.options = Object.assign({ extraWebpackConfig: 'webpack.config.js' }, browserTarget.options);
        });
        karmaServerTargets.forEach((browserTarget) => {
            browserTarget.builder = NGX_BUILD_PLUS_KARMA_BUILDER_TARGET;
            browserTarget.options = Object.assign({ extraWebpackConfig: 'webpack.config.js' }, browserTarget.options);
        });
        return config_1.updateWorkspace(workspace)(tree, context);
    };
}
function addNpmScripts(_options) {
    return (tree) => {
        const pkgPath = 'package.json';
        const buffer = tree.read(pkgPath);
        if (buffer === null) {
            throw new schematics_1.SchematicsException('Could not find package.json');
        }
        const pkg = JSON.parse(buffer.toString());
        pkg.scripts['build:prod'] = 'NODE_ENV=production ng build --prod';
        tree.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
        return tree;
    };
}
function install() {
    return (_host, context) => __awaiter(this, void 0, void 0, function* () {
        // Install the dependency
        context.addTask(new tasks_1.NodePackageInstallTask());
    });
}
//# sourceMappingURL=index.js.map